"""
–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–æ–º
–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CLI.
"""

from config import load_config, AgentConfig
from agent import CreditSimulationAgent


def example_basic():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    print("=" * 80 + "\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
    config = load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = CreditSimulationAgent(config)
    
    # –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    result = agent.query("–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?")
    
    if result["success"]:
        print(f"‚úÖ –û—Ç–≤–µ—Ç:\n{result['answer']}\n")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n")


def example_multiple_questions():
    """–ü—Ä–∏–º–µ—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥")
    print("=" * 80 + "\n")
    
    config = load_config()
    agent = CreditSimulationAgent(config)
    
    questions = [
        "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞?",
        "–ö–∞–∫–∞—è –¥–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –ø—Ä–æ—Å—Ä–æ—á–∫–µ 30+ –¥–Ω–µ–π?",
        "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-3 –º–µ—Å—è—Ü–∞ –ø–æ –æ–±—ä–µ–º—É –≤—ã–¥–∞—á"
    ]
    
    for i, question in enumerate(questions, 1):
        print(f"\n[{i}/{len(questions)}] –í–æ–ø—Ä–æ—Å: {question}")
        result = agent.query(question)
        
        if result["success"]:
            print(f"–û—Ç–≤–µ—Ç: {result['answer'][:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
        else:
            print(f"–û—à–∏–±–∫–∞: {result['error']}")


def example_raw_sql():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä—è–º—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤."""
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† 3: –ü—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã")
    print("=" * 80 + "\n")
    
    config = load_config()
    agent = CreditSimulationAgent(config)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    sql1 = "SELECT COUNT(*) as total FROM loan_issue"
    result1 = agent.run_raw_sql(sql1)
    print(f"SQL: {sql1}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}\n")
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    sql2 = """
    SELECT 
        substr(issue_date, 1, 4) as year,
        COUNT(*) as loans_count,
        ROUND(SUM(loan_amount)/1000000.0, 2) as volume_millions
    FROM loan_issue
    GROUP BY year
    ORDER BY year
    LIMIT 3
    """
    result2 = agent.run_raw_sql(sql2)
    print(f"SQL: {sql2.strip()}")
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    for row in result2:
        print(f"  {row}")


def example_table_info():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö."""
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü")
    print("=" * 80 + "\n")
    
    config = load_config()
    agent = CreditSimulationAgent(config)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã loan_issue:")
    print(agent.get_table_info("loan_issue"))
    print()
    
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã credit_fact_history:")
    print(agent.get_table_info("credit_fact_history"))


def example_custom_config():
    """–ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† 5: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("=" * 80 + "\n")
    
    import os
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
    config = AgentConfig(
        openai_api_key=os.getenv("OPENAI_API_KEY"),
        openai_model="gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4
        openai_temperature=0.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
        db_path="../credit_sim.db",
        verbose=False
    )
    
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  Model: {config.openai_model}")
    print(f"  Temperature: {config.openai_temperature}")
    print(f"  Database: {config.db_path}")
    print()
    
    agent = CreditSimulationAgent(config)
    result = agent.query("–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ?")
    
    if result["success"]:
        print(f"–û—Ç–≤–µ—Ç: {result['answer']}")


def example_batch_processing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è batch.py."""
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† 6: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–¥–µ")
    print("=" * 80 + "\n")
    
    config = load_config()
    agent = CreditSimulationAgent(config)
    
    questions = [
        "–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –±–∞–∑–µ?",
        "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫?",
        "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞?"
    ]
    
    results = []
    for question in questions:
        result = agent.query(question)
        results.append(result)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = sum(1 for r in results if r["success"])
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(results)}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
    print(f"  –° –æ—à–∏–±–∫–∞–º–∏: {len(results) - successful}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    import json
    from datetime import datetime
    
    output = {
        "timestamp": datetime.now().isoformat(),
        "results": results
    }
    
    filename = f"outputs/batch_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(output, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("=" * 80 + "\n")
    
    try:
        config = load_config()
        agent = CreditSimulationAgent(config)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        result1 = agent.query("–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤?")
        print(f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result1['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        result2 = agent.query("–ü–æ—Å—á–∏—Ç–∞–π –∫–≤–∞–Ω—Ç–æ–≤—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        print(f"–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result2['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if not result2['success']:
            print(f"  –ü—Ä–∏—á–∏–Ω–∞: {result2['error'][:100]}")
        
    except FileNotFoundError as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞ NCL\n")
    
    examples = [
        ("–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", example_basic),
        ("–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤", example_multiple_questions),
        ("–ü—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã", example_raw_sql),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö", example_table_info),
        ("–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", example_custom_config),
        ("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", example_batch_processing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", example_error_handling)
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
    for i, (name, _) in enumerate(examples, 1):
        print(f"  {i}. {name}")
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-7) –∏–ª–∏ 0 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö: ", end="")
    
    try:
        choice = input().strip()
        
        if choice == "0":
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
            for name, func in examples:
                try:
                    func()
                except KeyboardInterrupt:
                    print("\n\n‚è∏Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '{name}': {e}\n")
        else:
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
            idx = int(choice) - 1
            if 0 <= idx < len(examples):
                examples[idx][1]()
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞: {choice}")
    
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 7")
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("  1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("  2. –ù–∞—Å—Ç—Ä–æ–µ–Ω .env —Ñ–∞–π–ª —Å OPENAI_API_KEY")
        print("  3. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö credit_sim.db")


if __name__ == "__main__":
    main()

