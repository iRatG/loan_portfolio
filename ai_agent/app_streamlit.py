"""
Streamlit –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞ NCL Credit Simulation.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–æ–º,
–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤.

–ó–∞–ø—É—Å–∫:
    streamlit run app_streamlit.py
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from typing import List, Dict, Any
import json
from pathlib import Path

from config import load_config
from agent import CreditSimulationAgent


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI-–∞–≥–µ–Ω—Ç NCL Credit",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    .assistant-message {
        background-color: #f5f5f5;
        border-left: 4px solid #4caf50;
    }
    .error-message {
        background-color: #ffebee;
        border-left: 4px solid #f44336;
    }
    .stat-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
    }
    .example-question {
        background-color: #fff3cd;
        padding: 0.5rem;
        border-radius: 0.3rem;
        margin: 0.3rem 0;
        cursor: pointer;
        border: 1px solid #ffc107;
    }
    .example-question:hover {
        background-color: #ffe69c;
    }
</style>
""", unsafe_allow_html=True)


@st.cache_resource
def init_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ (–∫–µ—à–∏—Ä—É–µ—Ç—Å—è)."""
    try:
        config = load_config()
        agent = CreditSimulationAgent(config)
        return agent, None
    except Exception as e:
        return None, str(e)


def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "conversation_started" not in st.session_state:
        st.session_state.conversation_started = False
    
    if "session_id" not in st.session_state:
        st.session_state.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if "stats_loaded" not in st.session_state:
        st.session_state.stats_loaded = False


def get_db_stats(agent: CreditSimulationAgent) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î."""
    try:
        stats = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        queries = {
            "total_loans": "SELECT COUNT(*) FROM loan_issue",
            "total_volume": "SELECT ROUND(SUM(loan_amount)/1000000000.0, 2) FROM loan_issue",
            "avg_loan": "SELECT ROUND(AVG(loan_amount)/1000.0, 2) FROM loan_issue",
            "avg_rate": "SELECT ROUND(AVG(interest_rate), 2) FROM loan_issue",
            "period_start": "SELECT MIN(issue_date) FROM loan_issue",
            "period_end": "SELECT MAX(issue_date) FROM loan_issue",
            "active_loans": "SELECT COUNT(DISTINCT loan_id) FROM credit_fact_history WHERE status='Active'",
        }
        
        for key, sql in queries.items():
            result = agent.run_raw_sql(sql)
            stats[key] = result[0][0] if result and result[0] else 0
        
        return stats
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


def render_sidebar(agent: CreditSimulationAgent):
    """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å."""
    with st.sidebar:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        st.markdown("""
        <div style='padding: 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    border-radius: 10px; margin-bottom: 20px;'>
            <h3 style='color: white; margin: 0 0 10px 0;'>üìä NCL Analytics</h3>
            <a href='http://localhost:8000' 
               style='display: block; padding: 8px; background: white; color: #667eea; 
                      border-radius: 6px; text-decoration: none; text-align: center; 
                      font-weight: 600; font-size: 13px; margin-bottom: 8px;'>
                üè† –ì–ª–∞–≤–Ω–∞—è
            </a>
            <a href='http://localhost:8050' 
               style='display: block; padding: 8px; background: rgba(255,255,255,0.2); 
                      color: white; border-radius: 6px; text-decoration: none; 
                      text-align: center; font-weight: 600; font-size: 13px;'>
                üìä –î–∞—à–±–æ—Ä–¥
            </a>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### ü§ñ AI-–∞–≥–µ–Ω—Ç")
        st.markdown("---")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
            st.session_state.stats_loaded = False
        
        if not st.session_state.stats_loaded:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."):
                stats = get_db_stats(agent)
                st.session_state.db_stats = stats
                st.session_state.stats_loaded = True
        
        if st.session_state.stats_loaded:
            stats = st.session_state.db_stats
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤", f"{stats.get('total_loans', 0):,}")
                st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{stats.get('avg_loan', 0)} —Ç—ã—Å ‚ÇΩ")
            with col2:
                st.metric("–û–±—ä–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è", f"{stats.get('total_volume', 0)} –º–ª—Ä–¥ ‚ÇΩ")
                st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞", f"{stats.get('avg_rate', 0)}%")
            
            st.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {stats.get('period_start')} - {stats.get('period_end')}")
        
        st.markdown("---")
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        examples_categories = {
            "üîç –û–±—â–µ–µ": [
                "–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –±–∞–∑–µ?",
                "–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö?",
                "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞?"
            ],
            "üìà –í—ã–¥–∞—á–∏": [
                "–¢–æ–ø-5 –º–µ—Å—è—Ü–µ–≤ –ø–æ –≤—ã–¥–∞—á–∞–º",
                "–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–¥–∞—á –ø–æ –≥–æ–¥–∞–º",
                "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–¥–∞—á–∞—Ö"
            ],
            "‚ö†Ô∏è –†–∏—Å–∫–∏": [
                "–ö–∞–∫–∞—è –¥–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –ø—Ä–æ—Å—Ä–æ—á–∫–µ 30+?",
                "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ DPD –±–∞–∫–µ—Ç–∞–º",
                "–î–∏–Ω–∞–º–∏–∫–∞ PAR30"
            ],
            "üí∞ –ú–∞–∫—Ä–æ": [
                "–ö–∞–∫ —Å—Ç–∞–≤–∫–∞ –¶–ë –≤–ª–∏—è–ª–∞ –Ω–∞ –≤—ã–¥–∞—á–∏?",
                "–ú–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ 2014-2015",
                "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã –∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
            ]
        }
        
        selected_category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            list(examples_categories.keys())
        )
        
        for example in examples_categories[selected_category]:
            if st.button(f"üìù {example}", use_container_width=True, key=f"ex_{example}"):
                st.session_state.selected_example = example
                st.rerun()
        
        st.markdown("---")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
        st.markdown("### ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", use_container_width=True):
                st.session_state.messages = []
                st.session_state.conversation_started = False
                st.rerun()
        
        with col2:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                save_conversation()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        st.markdown("---")
        st.caption(f"–°–µ—Å—Å–∏—è: {st.session_state.session_id}")
        st.caption(f"–í–æ–ø—Ä–æ—Å–æ–≤: {len([m for m in st.session_state.messages if m['role'] == 'user'])}")


def save_conversation():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤."""
    if not st.session_state.messages:
        st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    output_dir = Path("outputs")
    output_dir.mkdir(exist_ok=True)
    
    filename = output_dir / f"conversation_{st.session_state.session_id}.json"
    
    data = {
        "session_id": st.session_state.session_id,
        "timestamp": datetime.now().isoformat(),
        "messages": st.session_state.messages
    }
    
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    st.success(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


def render_chat_message(message: Dict[str, Any]):
    """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."""
    role = message["role"]
    content = message["content"]
    
    if role == "user":
        with st.chat_message("user", avatar="üë§"):
            st.markdown(content)
    
    elif role == "assistant":
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.markdown(content)
    
    elif role == "error":
        with st.chat_message("assistant", avatar="‚ùå"):
            st.error(content)


def render_welcome():
    """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    st.markdown('<div class="main-header">ü§ñ AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è</div>', 
                unsafe_allow_html=True)
    
    st.markdown("""
    ### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
    
    –Ø - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ NCL Credit Simulation (2010-2015).
    
    **–ß—Ç–æ —è —É–º–µ—é:**
    - üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    - üìä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    - üìà –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫
    - ‚ö° –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∞–º–∏, PAR, IFRS9, vintages
    
    **–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
    1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ‚Üí
    2. –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∂–µ ‚Üì
    """)
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.selected_example = "–ü–æ–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"
            st.rerun()
    
    with col2:
        if st.button("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", use_container_width=True):
            st.session_state.selected_example = "–ö–∞–∫–∞—è –¥–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –ø—Ä–æ—Å—Ä–æ—á–∫–µ 30+ –¥–Ω–µ–π?"
            st.rerun()
    
    with col3:
        if st.button("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–¥–∞—á", use_container_width=True):
            st.session_state.selected_example = "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-5 –º–µ—Å—è—Ü–µ–≤ –ø–æ –æ–±—ä–µ–º—É –≤—ã–¥–∞—á"
            st.rerun()


def process_query(agent: CreditSimulationAgent, question: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({
        "role": "user",
        "content": question,
        "timestamp": datetime.now().isoformat()
    })
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    with st.chat_message("user", avatar="üë§"):
        st.markdown(question)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–æ–º
    with st.chat_message("assistant", avatar="ü§ñ"):
        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
            result = agent.query(question)
        
        if result["success"]:
            answer = result["answer"]
            st.markdown(answer)
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append({
                "role": "assistant",
                "content": answer,
                "timestamp": datetime.now().isoformat()
            })
        else:
            error_msg = f"‚ùå **–û—à–∏–±–∫–∞:** {result['error']}"
            st.error(error_msg)
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append({
                "role": "error",
                "content": error_msg,
                "timestamp": datetime.now().isoformat()
            })


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    init_session_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent, error = init_agent()
    
    if error:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {error}")
        st.info("""
        **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
        1. –§–∞–π–ª `.env` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç `OPENAI_API_KEY`
        2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö `credit_sim.db` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: `pip install -r requirements.txt`
        """)
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    render_sidebar(agent)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    if not st.session_state.conversation_started:
        render_welcome()
        st.session_state.conversation_started = True
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        render_chat_message(message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
    if "selected_example" in st.session_state:
        example = st.session_state.selected_example
        del st.session_state.selected_example
        process_query(agent, example)
        st.rerun()
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    question = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
    
    if question:
        process_query(agent, question)
        st.rerun()


if __name__ == "__main__":
    main()

