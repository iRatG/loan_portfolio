"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI-–∞–≥–µ–Ω—Ç—É.

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
- –ó–∞–ø—É—Å–∫–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, CSV, HTML
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import json
import csv
import argparse
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

from config import load_config
from agent import CreditSimulationAgent


class BatchProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    
    def __init__(self, agent: CreditSimulationAgent):
        self.agent = agent
        self.results: List[Dict[str, Any]] = []
    
    def process_questions(self, questions: List[str], verbose: bool = True) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
        
        Args:
            questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            verbose: –í—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        total = len(questions)
        
        if verbose:
            print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {total} –≤–æ–ø—Ä–æ—Å–æ–≤...\n")
        
        for i, question in enumerate(questions, 1):
            if verbose:
                print(f"[{i}/{total}] {question}")
            
            result = self.agent.query(question)
            result["index"] = i
            result["timestamp"] = datetime.now().isoformat()
            
            self.results.append(result)
            
            if verbose:
                if result["success"]:
                    print(f"         ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                else:
                    error_preview = result['error'][:100] if result['error'] else "Unknown"
                    print(f"         ‚ùå –û—à–∏–±–∫–∞: {error_preview}")
                print()
        
        if verbose:
            successful = sum(1 for r in self.results if r["success"])
            print(f"{'='*80}")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}/{total} —É—Å–ø–µ—à–Ω–æ ({successful/total*100:.1f}%)")
        
        return self.results
    
    def save_json(self, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON."""
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump({
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "total_questions": len(self.results),
                    "successful": sum(1 for r in self.results if r["success"]),
                    "failed": sum(1 for r in self.results if not r["success"])
                },
                "results": self.results
            }, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    def save_csv(self, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV."""
        if not self.results:
            return
        
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, "w", encoding="utf-8", newline="") as f:
            fieldnames = ["index", "question", "answer", "success", "error", "timestamp"]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            
            for result in self.results:
                writer.writerow({
                    "index": result["index"],
                    "question": result["question"],
                    "answer": result.get("answer", ""),
                    "success": result["success"],
                    "error": result.get("error", ""),
                    "timestamp": result["timestamp"]
                })
        
        print(f"üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    def save_html(self, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML –æ—Ç—á–µ—Ç."""
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(self.results)
        successful = sum(1 for r in self.results if r["success"])
        failed = total - successful
        success_rate = (successful / total * 100) if total > 0 else 0
        
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Agent Batch Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }}
        h1 {{
            color: #2d3748;
            margin-bottom: 10px;
            font-size: 32px;
        }}
        .timestamp {{
            color: #718096;
            margin-bottom: 30px;
            font-size: 14px;
        }}
        .summary {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }}
        .summary-card {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 10px;
            color: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }}
        .summary-label {{
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 5px;
        }}
        .summary-value {{
            font-size: 36px;
            font-weight: bold;
        }}
        .qa-item {{
            background: #f7fafc;
            padding: 25px;
            margin: 20px 0;
            border-radius: 10px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }}
        .qa-item:hover {{
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }}
        .qa-item.error {{
            border-left-color: #f56565;
            background: #fff5f5;
        }}
        .question-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }}
        .question {{
            font-weight: 600;
            color: #2d3748;
            font-size: 18px;
            flex: 1;
        }}
        .status-badge {{
            display: inline-block;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        .status-success {{
            background: #c6f6d5;
            color: #22543d;
        }}
        .status-error {{
            background: #fed7d7;
            color: #742a2a;
        }}
        .answer {{
            color: #4a5568;
            line-height: 1.7;
            white-space: pre-wrap;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }}
        .error-text {{
            color: #e53e3e;
            font-style: italic;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border: 1px solid #fc8181;
        }}
        .meta {{
            color: #a0aec0;
            font-size: 12px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e2e8f0;
        }}
        .progress-bar {{
            height: 30px;
            background: #e2e8f0;
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 40px;
        }}
        .progress-fill {{
            height: 100%;
            background: linear-gradient(90deg, #48bb78, #38a169);
            transition: width 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
        }}
        @media print {{
            body {{ background: white; }}
            .container {{ box-shadow: none; }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä AI Agent Batch Report</h1>
        <div class="timestamp">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</div>
        
        <div class="progress-bar">
            <div class="progress-fill" style="width: {success_rate}%;">
                {success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ
            </div>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <div class="summary-label">–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
                <div class="summary-value">{total}</div>
            </div>
            <div class="summary-card" style="background: linear-gradient(135deg, #48bb78, #38a169);">
                <div class="summary-label">–£—Å–ø–µ—à–Ω–æ</div>
                <div class="summary-value">{successful}</div>
            </div>
            <div class="summary-card" style="background: linear-gradient(135deg, #f56565, #e53e3e);">
                <div class="summary-label">–° –æ—à–∏–±–∫–∞–º–∏</div>
                <div class="summary-value">{failed}</div>
            </div>
            <div class="summary-card" style="background: linear-gradient(135deg, #4299e1, #3182ce);">
                <div class="summary-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                <div class="summary-value">{success_rate:.0f}%</div>
            </div>
        </div>
"""
        
        # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        for result in self.results:
            error_class = "" if result["success"] else " error"
            status_class = "status-success" if result["success"] else "status-error"
            status_text = "‚úì –£—Å–ø–µ—à–Ω–æ" if result["success"] else "‚úó –û—à–∏–±–∫–∞"
            
            html += f"""
        <div class="qa-item{error_class}">
            <div class="question-header">
                <div class="question">{result['index']}. {result['question']}</div>
                <span class="status-badge {status_class}">{status_text}</span>
            </div>
"""
            
            if result["success"]:
                answer = result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                html += f"""            <div class="answer">{answer}</div>"""
            else:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                html += f"""            <div class="error-text">‚ùå {error}</div>"""
            
            html += f"""
            <div class="meta">‚è± {result['timestamp']}</div>
        </div>
"""
        
        html += """
    </div>
</body>
</html>
"""
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(html)
        
        print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


def load_questions_from_file(file_path: str) -> List[str]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - .txt: –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–æ–∫—É (—Å—Ç—Ä–æ–∫–∏ —Å # –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
    - .json: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–µ–º "question"
    """
    path = Path(file_path)
    
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    if path.suffix == ".txt":
        with open(path, "r", encoding="utf-8") as f:
            questions = [
                line.strip() for line in f 
                if line.strip() and not line.strip().startswith("#")
            ]
    
    elif path.suffix == ".json":
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                if all(isinstance(q, str) for q in data):
                    questions = data
                elif all(isinstance(q, dict) and "question" in q for q in data):
                    questions = [q["question"] for q in data]
                else:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
            else:
                raise ValueError("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤")
    
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {path.suffix}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .txt –∏–ª–∏ .json")
    
    return questions


def create_default_questions_file(output_file: str = "questions_template.txt"):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    questions = """# –®–∞–±–ª–æ–Ω –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞ NCL Credit Simulation
# –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å #, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
# –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–æ–∫—É

# ========== –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==========
–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?
–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ?
–ö–∞–∫–æ–π –æ–±—â–∏–π –æ–±—ä–µ–º –≤—ã–¥–∞—á –≤ —Ä—É–±–ª—è—Ö?
–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞?

# ========== –ê–Ω–∞–ª–∏–∑ –≤—ã–¥–∞—á ==========
–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-5 –º–µ—Å—è—Ü–µ–≤ –ø–æ –æ–±—ä–µ–º—É –≤—ã–¥–∞—á
–ö–∞–∫ –º–µ–Ω—è–ª—Å—è —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –≥–æ–¥–∞–º?
–ö–∞–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º?
–ö–∞–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–æ–π –¶–ë –∏ –æ–±—ä–µ–º–æ–º –≤—ã–¥–∞—á?
–ö–∞–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–¥–∞—á–∞—Ö –ø–æ –º–µ—Å—è—Ü–∞–º –≥–æ–¥–∞?

# ========== –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏ ==========
–ö–∞–∫–∞—è –¥–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Å—Ä–æ—á–∫–µ 30+ –¥–Ω–µ–π?
–ü–æ–∫–∞–∂–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ DPD –±–∞–∫–µ—Ç–∞–º
–ö–∞–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ PAR30 –ø–æ –º–µ—Å—è—Ü–∞–º —Å 2010 –ø–æ 2015?
–ö–∞–∫–æ–π cure rate –∏ default rate?
–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –¥–µ—Ñ–æ–ª—Ç–µ?

# ========== –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ ==========
–ö–∞–∫ –≤–ª–∏—è–ª–∞ —Å—Ç–∞–≤–∫–∞ –¶–ë –Ω–∞ –æ–±—ä–µ–º –≤—ã–¥–∞—á?
–ö–∞–∫–∞—è –±—ã–ª–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∏ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ –≤ –ø–µ—Ä–∏–æ–¥ –∫—Ä–∏–∑–∏—Å–∞ 2014-2015?
–ö–∞–∫ –º–µ–Ω—è–ª—Å—è –º–∞–∫—Ä–æ-–∏–Ω–¥–µ–∫—Å –ø–æ –≥–æ–¥–∞–º?

# ========== Vintage analysis ==========
–ü–æ–∫–∞–∂–∏ vintage analysis –¥–ª—è –∫–æ–≥–æ—Ä—Ç 2010 –≥–æ–¥–∞
–ö–∞–∫–∏–µ –∫–æ–≥–æ—Ä—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Ö—É–¥—à—É—é –ø—Ä–æ—Å—Ä–æ—á–∫—É?
–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π MOB –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤?

# ========== IFRS9 ==========
–ü–æ–∫–∞–∂–∏ IFRS9 stage mix –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
–ö–∞–∫ –º–µ–Ω—è–ª—Å—è stage mix –ø–æ –º–µ—Å—è—Ü–∞–º –≤ 2014-2015?

# ========== –ü–ª–∞—Ç–µ–∂–∏ ==========
–ö–∞–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø–ª–∞–Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π?
–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞–∫—Ä—ã–ª–æ—Å—å –¥–æ—Å—Ä–æ—á–Ω–æ?
"""
    
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(questions)
    
    print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {output_file}")
    print(f"   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"   python batch.py --input {output_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI-–∞–≥–µ–Ω—Ç—É",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
  python batch.py --create-template
  
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
  python batch.py --input questions.txt
  
  # –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  python batch.py --input questions.txt --output-dir reports
  
  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ HTML
  python batch.py --input questions.txt --format html
        """
    )
    
    parser.add_argument(
        "--input",
        "-i",
        help="–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (.txt –∏–ª–∏ .json)"
    )
    parser.add_argument(
        "--output-dir",
        "-o",
        default="reports",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: reports)"
    )
    parser.add_argument(
        "--format",
        "-f",
        choices=["json", "csv", "html", "all"],
        default="all",
        help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all)"
    )
    parser.add_argument(
        "--create-template",
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"
    )
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
    )
    parser.add_argument(
        "--env",
        help="–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if args.create_template:
        create_default_questions_file()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not args.input:
        parser.error("–¢—Ä–µ–±—É–µ—Ç—Å—è --input –∏–ª–∏ --create-template")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {args.input}...")
        questions = load_questions_from_file(args.input)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"\n‚öôÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = load_config(args.env)
        if args.verbose:
            config.verbose = True
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        print(f"\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ ({config.llm_provider})...")
        agent = CreditSimulationAgent(config)
        print(f"‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        processor = BatchProcessor(agent)
        processor.process_questions(questions, verbose=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_dir = Path(args.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        output_base = output_dir / f"batch_report_{timestamp}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_dir}/...")
        
        if args.format in ["json", "all"]:
            processor.save_json(f"{output_base}.json")
        
        if args.format in ["csv", "all"]:
            processor.save_csv(f"{output_base}.csv")
        
        if args.format in ["html", "all"]:
            processor.save_html(f"{output_base}.html")
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}/")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

