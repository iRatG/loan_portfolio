"""
–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (CLI) –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–æ–º,
–∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
"""

import os
import sys
import json
import argparse
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional

try:
    from colorama import init, Fore, Style
    init(autoreset=True)
    HAS_COLORAMA = True
except ImportError:
    HAS_COLORAMA = False

from config import load_config, AgentConfig
from agent import CreditSimulationAgent


class ConversationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."""
    
    def __init__(self, history_file: str):
        self.history_file = Path(history_file)
        self.history_file.parent.mkdir(parents=True, exist_ok=True)
        self.current_session: List[Dict[str, Any]] = []
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    def add_interaction(
        self,
        question: str,
        answer: str,
        success: bool,
        error: Optional[str] = None
    ):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        interaction = {
            "session_id": self.session_id,
            "timestamp": datetime.now().isoformat(),
            "question": question,
            "answer": answer,
            "success": success,
            "error": error
        }
        self.current_session.append(interaction)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª (JSONL format)
        with open(self.history_file, "a", encoding="utf-8") as f:
            f.write(json.dumps(interaction, ensure_ascii=False) + "\n")
    
    def get_session_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏."""
        return {
            "session_id": self.session_id,
            "total_questions": len(self.current_session),
            "successful": sum(1 for i in self.current_session if i["success"]),
            "failed": sum(1 for i in self.current_session if not i["success"]),
            "questions": [i["question"] for i in self.current_session]
        }


class AgentCLI:
    """–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
    
    COMMANDS = {
        "help": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "examples": "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤",
        "history": "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏",
        "tables": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –ë–î",
        "stats": "–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ë–î",
        "sql": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å (—Ñ–æ—Ä–º–∞—Ç: /sql SELECT...)",
        "save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª",
        "clear": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
        "config": "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
        "exit": "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Ç–∞–∫–∂–µ: quit, –≤—ã—Ö–æ–¥)"
    }
    
    def __init__(
        self,
        agent: CreditSimulationAgent,
        conversation_manager: ConversationManager
    ):
        self.agent = agent
        self.conv_manager = conversation_manager
        self.last_answer = None
    
    def _colored(self, text: str, color: str) -> str:
        """–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ colorama."""
        if not HAS_COLORAMA:
            return text
        
        colors = {
            "red": Fore.RED,
            "green": Fore.GREEN,
            "yellow": Fore.YELLOW,
            "blue": Fore.BLUE,
            "magenta": Fore.MAGENTA,
            "cyan": Fore.CYAN,
            "white": Fore.WHITE
        }
        
        return f"{colors.get(color, '')}{text}{Style.RESET_ALL}"
    
    def print_header(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        print("\n" + "=" * 80)
        print(self._colored(
            " " * 15 + "AI-–ê–ì–ï–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ö–†–ï–î–ò–¢–ù–û–ì–û –ü–û–†–¢–§–ï–õ–Ø NCL",
            "cyan"
        ))
        print("=" * 80)
        print(f"\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.agent.config.db_path}")
        print(f"ü§ñ LLM: {self.agent.config.llm_provider} ({self.agent.config.get_model_name()})")
        print(f"üÜî –°–µ—Å—Å–∏—è: {self.conv_manager.session_id}")
        print(f"\n–í–≤–µ–¥–∏—Ç–µ {self._colored('/help', 'yellow')} –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        print("-" * 80 + "\n")
    
    def print_help(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É."""
        print(f"\n{self._colored('üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'cyan')}\n")
        for cmd, desc in self.COMMANDS.items():
            cmd_colored = self._colored(f"/{cmd:<12}", "yellow")
            print(f"  {cmd_colored} - {desc}")
        print(f"\nüí° {self._colored('–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!', 'green')}")
        print()
    
    def handle_command(self, command: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.
        
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, False –µ—Å–ª–∏ –≤—ã—Ö–æ–¥
        """
        cmd_parts = command.strip().split(maxsplit=1)
        cmd = cmd_parts[0].lower()
        args = cmd_parts[1] if len(cmd_parts) > 1 else ""
        
        if cmd in ["exit", "quit", "–≤—ã—Ö–æ–¥"]:
            return False
        
        elif cmd == "help":
            self.print_help()
        
        elif cmd == "examples":
            print(f"\n{self._colored('üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:', 'cyan')}\n")
            examples = self.agent.get_example_questions()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            groups = {
                "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": examples[0:5],
                "–ê–Ω–∞–ª–∏–∑ –≤—ã–¥–∞—á": examples[5:10],
                "–†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏": examples[10:15],
                "IFRS9 –∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞": examples[15:20],
            }
            for group_name, questions in groups.items():
                print(f"  {self._colored(group_name + ':', 'yellow')}")
                for q in questions:
                    print(f"    ‚Ä¢ {q}")
                print()
        
        elif cmd == "history":
            summary = self.conv_manager.get_session_summary()
            print(f"\n{self._colored('üìú –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏', 'cyan')} {summary['session_id']}:\n")
            print(f"  –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {summary['total_questions']}")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {self._colored(str(summary['successful']), 'green')}")
            print(f"  –° –æ—à–∏–±–∫–∞–º–∏: {self._colored(str(summary['failed']), 'red')}")
            if summary['questions']:
                print("\n  –í–æ–ø—Ä–æ—Å—ã:")
                for i, q in enumerate(summary['questions'], 1):
                    print(f"    {i}. {q}")
            print()
        
        elif cmd == "tables":
            print(f"\n{self._colored('üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:', 'cyan')}\n")
            print(self.agent.get_table_info())
            print()
        
        elif cmd == "stats":
            self.show_db_stats()
        
        elif cmd == "sql":
            if not args:
                print(f"{self._colored('‚ùå', 'red')} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sql SELECT ...")
            else:
                self.execute_raw_sql(args)
        
        elif cmd == "save":
            self.save_last_answer()
        
        elif cmd == "config":
            self.show_config()
        
        elif cmd == "clear":
            os.system('cls' if os.name == 'nt' else 'clear')
            self.print_header()
        
        else:
            print(f"{self._colored('‚ùå', 'red')} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{cmd}")
            print(f"–í–≤–µ–¥–∏—Ç–µ {self._colored('/help', 'yellow')} –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        return True
    
    def show_config(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        cfg = self.agent.config
        print(f"\n{self._colored('‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:', 'cyan')}\n")
        print(f"  LLM Provider: {cfg.llm_provider}")
        print(f"  Model: {cfg.get_model_name()}")
        print(f"  Temperature: {cfg.openai_temperature}")
        print(f"  Max Tokens: {cfg.openai_max_tokens}")
        print(f"  Database: {cfg.db_path}")
        print(f"  Log File: {cfg.log_file}")
        print(f"  History File: {cfg.history_file}")
        print(f"  Verbose: {cfg.verbose}")
        print()
    
    def show_db_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î."""
        print(f"\n{self._colored('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', 'cyan')}\n")
        
        stats_queries = [
            ("–í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤", "SELECT COUNT(*) FROM loan_issue"),
            ("–ü–µ—Ä–∏–æ–¥ –≤—ã–¥–∞—á", "SELECT MIN(issue_date) || ' - ' || MAX(issue_date) FROM loan_issue"),
            ("–û–±—â–∏–π –æ–±—ä–µ–º –≤—ã–¥–∞—á (–º–ª—Ä–¥ —Ä—É–±)", "SELECT ROUND(SUM(loan_amount)/1000000000.0, 2) FROM loan_issue"),
            ("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ç—ã—Å —Ä—É–±)", "SELECT ROUND(AVG(loan_amount)/1000.0, 2) FROM loan_issue"),
            ("–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ (%)", "SELECT ROUND(AVG(interest_rate), 2) FROM loan_issue"),
            ("–ó–∞–ø–∏—Å–µ–π –≤ credit_fact_history", "SELECT COUNT(*) FROM credit_fact_history"),
            ("–ü–µ—Ä–∏–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞", "SELECT MIN(period_month) || ' - ' || MAX(period_month) FROM credit_fact_history")
        ]
        
        for label, sql in stats_queries:
            try:
                result = self.agent.run_raw_sql(sql)
                value = result[0][0] if result and result[0] else "N/A"
                print(f"  {label}: {self._colored(str(value), 'green')}")
            except Exception as e:
                print(f"  {label}: {self._colored(f'–û—à–∏–±–∫–∞ - {e}', 'red')}")
        print()
    
    def execute_raw_sql(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º–æ–π SQL."""
        print(f"\n{self._colored('üîß –í—ã–ø–æ–ª–Ω—è—é SQL:', 'cyan')}\n{sql}\n")
        try:
            result = self.agent.run_raw_sql(sql)
            if result:
                print(f"{self._colored('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', 'cyan')}\n")
                for i, row in enumerate(result[:50], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
                    print(f"  {i}. {row}")
                if len(result) > 50:
                    print(f"\n  {self._colored(f'... –∏ –µ—â–µ {len(result) - 50} —Å—Ç—Ä–æ–∫', 'yellow')}")
                print(f"\n–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {self._colored(str(len(result)), 'green')}")
            else:
                print(f"{self._colored('‚úÖ', 'green')} –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        except Exception as e:
            print(f"{self._colored('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', 'red')} {e}")
        print()
    
    def save_last_answer(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª."""
        if not self.last_answer:
            print(f"{self._colored('‚ùå', 'red')} –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é outputs
        output_dir = Path("outputs")
        output_dir.mkdir(exist_ok=True)
        
        filename = output_dir / f"answer_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"–í–æ–ø—Ä–æ—Å: {self.last_answer['question']}\n")
            f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"\n{'='*80}\n\n")
            f.write(f"–û—Ç–≤–µ—Ç:\n\n{self.last_answer['answer']}\n")
        
        print(f"{self._colored('‚úÖ', 'green')} –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def process_question(self, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print(f"\n{self._colored('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...', 'yellow')}\n")
        
        result = self.agent.query(question)
        
        if result["success"]:
            print(f"{self._colored('üí° –û—Ç–≤–µ—Ç:', 'cyan')}")
            print(result["answer"])
            self.last_answer = result
            self.conv_manager.add_interaction(
                question, result["answer"], True
            )
        else:
            print(f"{self._colored('‚ùå –û—à–∏–±–∫–∞:', 'red')}")
            print(result["error"])
            self.conv_manager.add_interaction(
                question, "", False, result["error"]
            )
        
        print("\n" + "-" * 80 + "\n")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º."""
        self.print_header()
        
        while True:
            try:
                user_input = input(f"{self._colored('‚ùì', 'cyan')} –í–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞: ").strip()
                
                if not user_input:
                    continue
                
                # –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
                if user_input.startswith("/"):
                    if not self.handle_command(user_input[1:]):
                        break
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
                elif user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    break
                # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                else:
                    self.process_question(user_input)
            
            except KeyboardInterrupt:
                print("\n")
                break
            except EOFError:
                print("\n")
                break
            except Exception as e:
                print(f"\n{self._colored('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', 'red')} {e}\n")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
        summary = self.conv_manager.get_session_summary()
        print(f"\n{self._colored('üìä –°–≤–æ–¥–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏:', 'cyan')}")
        print(f"  –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {summary['total_questions']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self._colored(str(summary['successful']), 'green')}")
        print(f"  –° –æ—à–∏–±–∫–∞–º–∏: {self._colored(str(summary['failed']), 'red')}")
        print(f"\n{self._colored('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!', 'cyan')}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è NCL",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  
  # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
  python cli.py
  
  # –ó–∞–ø—É—Å–∫ —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é
  python cli.py --model gpt-4
  
  # Verbose —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  python cli.py --verbose
  
  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –ë–î
  python cli.py --db ../other_database.db

–ù–∞—Å—Ç—Ä–æ–π–∫–∞:
  1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env
  2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à OPENAI_API_KEY
  3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
    )
    
    parser.add_argument(
        "--env",
        help="–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ai_agent)"
    )
    parser.add_argument(
        "--db",
        help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)"
    )
    parser.add_argument(
        "--model",
        help="–ú–æ–¥–µ–ª—å LLM (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)"
    )
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"
    )
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n‚öôÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", end="", flush=True)
        config = load_config(args.env)
        print(" ‚úÖ")
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if args.db:
            config.db_path = args.db
        if args.model:
            if config.llm_provider == "openai":
                config.openai_model = args.model
            else:
                config.anthropic_model = args.model
        if args.verbose:
            config.verbose = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ ({config.llm_provider})...", end="", flush=True)
        agent = CreditSimulationAgent(config)
        print(" ‚úÖ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        conv_manager = ConversationManager(config.history_file)
        
        # –ó–∞–ø—É—Å–∫ CLI
        cli = AgentCLI(agent, conv_manager)
        cli.run()
        
    except FileNotFoundError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("  1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ (credit_sim.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        print("  2. –ü—É—Ç—å –∫ –ë–î —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
    
    except ValueError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env:")
        print("  1. –£–∫–∞–∑–∞–Ω –ª–∏ OPENAI_API_KEY?")
        print("  2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º?")
        sys.exit(1)
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

