Техническое задание модуль 2
Отлично, переходим к **техническому проекту второй части** — эмуляции операционного факта по кредитам, т.е. динамики жизни кредитного портфеля в разрезе месяцев (кредитный план, балансы, миграции, жизненный шум и погашения), на основе ранее созданных выдач. Сформирую структуру как ТЗ-документ и чёткое описание для последующей реализации на Python/SQL.

***

## ТЕХНИКО-ФУНКЦИОНАЛЬНОЕ ЗАДАНИЕ (Часть 2)

### МОДУЛЬ 2: Эмуляция операционного факта кредита

***

### 1. Цель

- Формировать в базе данных реалистичную кредитную историю по каждому кредиту: ежемесячные платежи, балансы, статусы, факты дефолта, полные и частичные погашения.
- Моделировать жизненный цикл кредита: график платежей + миграция по buckets DPD.
- Поддержка матрицы миграций, сезонных коэффициентов, макроэффектов (ставка, занятость, шум).

***

### 2. Словари и конфигурации (Reference Data)

#### 2.1. Матрица миграций (migration_matrix)

Пример из исследования :​
Вероятности миграции для "0 дней" (стартовый месяц):

"Остаться": 0.93–0.97

"Переход в 1–30": 0.02–0.05

"Переход в 31–60": 0.01–0.02

"Переход в 61–90 или 90+": <0.01

"Реабилитация из 1–30 в 0": 0.35–0.45 (по отдельным годам и портфелям)

Динамика по годам (условные данные для потребкредитов):
Год	0→0	0→1-30	1-30→0	1-30→31-60	31-60→0	31-60→61-90	61-90→90+
2011	0.97	0.02	0.42	0.14	0.25	0.22	0.30
2012	0.96	0.03	0.38	0.18	0.22	0.24	0.32
2013	0.95	0.04	0.35	0.19	0.20	0.25	0.34
2014	0.92	0.06	0.30	0.22	0.18	0.28	0.39
2015	0.90	0.08	0.26	0.25	0.15	0.30	0.41
Видно, что рост кризиса (2014–2015) приводит к увеличению скорости перехода в просрочку, снижению реабилитаций и росту дефолтов.



- Пример справочника миграций в формате JSON: адаптировать пот таблицу из исследования

```json
{
  "from_to": {
    "0": {"0": 0.89, "1-30": 0.06, "31-60": 0.03, "61-90": 0.01, "90+": 0.01},
    "1-30": {...},
    "31-60": {...},
    "61-90": {...},
    "90+": {...}
  }
}
```
- По каждому DPD bucket — вероятности перехода в каждый другой bucket в месяц.

#### 2.2. Справочник сезонных коэффициентов (season_reference.json)
- Уже реализован в первой части, используется для модификации вероятностей миграций/погашений.

#### 2.3. Исторические macro параметры (macro_reference.json)
- Используются для настройки monthly probabilities (кризисы, рост дефолта).

#### 2.4. Справочник параметров кредитного продукта (product_reference.json)
- Тип кредита, срок, процентная ставка, базовый график платежей, структура комиссии.

#### 2.5. Справочник коэффициентов жизненного шума (noise_ref.json)
- Вероятности нерегулярных явлений (jump‑to‑delinquency, repayment after default, force majeure), параметр η, шумовые сценарии.

***

### 3. Структура основной operational fact таблицы

**credit_fact_history:**
| Field                | Type        | Description |
|----------------------|------------|-------------|
| loan_id              | bigint     | Уникальный идентификатор кредита |
| period_month         | date       | Месяц учета (YYYY-MM-01)  |
| MOB                  | int        | Months on Book           |
| DPD_bucket           | varchar(16)| Статус просрочки ("0", "1-30", "31-60", ...)  |
| overdue_days         | int        | Просрочено дней          |
| balance              | decimal    | Остаток долга            |
| scheduled_payment    | decimal    | Плановый monthly платеж   |
| actual_payment       | decimal    | Фактически внесённая сумма|
| status               | varchar(12)| "active", "repaid", "default"    |
| macro_rate_cbr       | decimal(5,2) | Ставка ЦБ на месяц        |
| macro_employment_rate| decimal(5,2) | Занятость                 |
| season_factor        | decimal(5,2) | Сезонный коэффициент      |
| migration_scenario   | varchar(32)  | "base", "macro_shock", "holiday"|
| created_at           | timestamp    | Дата создания записи      |
| batch_id             | varchar(24)  | Пакетная идентификация    |

***

### 4. Основные алгоритмы

#### 4.1. Платёжный график по кредиту
- Для каждого кредита рассчитывается base график согласно продукту:
    - annuity/flat,
    - ежемесячный платеж (scheduled_payment),
    - остаток долга (balance = balance_prev - payment),
    - корректируется с учетом early/partial repayments.

#### 4.2. Миграция по DPD bucket

- В каждый месяц:
    - На основе текущего bucket и матрицы — выбирается next-бакет.
    - Вероятности корректируются сезонными и макро коэффициентами.
    - Поведенческий сценарий жизненного шума разыгрывает редкие события (скачок, восстановление, досрочное гашение).

#### 4.3. Сезонные эффекты и макро‑драйверы

- Коэффициенты из season_reference влияют на вероятность перехода в просрочку, скорость гашения и шанс early repayment.
- Macro_reference влияет как на вероятность дефолта, так и на payment propensity (поведенческое желание платить).

#### 4.4. Эмуляция жизненного шума (noise effect)

- В каждом периоде генерируется случайное событие:
    - техническая просрочка ("забыл заплатить"),
    - force majeure (резкий переход в тяжелую просрочку),
    - внезапное полное гашение кредита.

***

### 5. Алгоритм цикла симуляции по кредиту

1. **Инициализация:** получение графика платежей, начального баланса, стартовый DPD.
2. **Месяц t:**
    - Выбор сценария миграции: базовый или "шумовой"
    - Применение миграционной матрицы + сезонных/макро коэффициентов + noise_ref
    - Расчёт фактического payment (с шансом ошибок, форс-мажора)
    - Обновление DPD, баланса, MOB, статуса
    - Запись строки в credit_fact_history
3. **Остановка:** при статусе “repaid” (balance < threshold or срок), “default” (непогашенная тяжелая просрочка) или expiration срока договора.

***

### 6. Физическая модель хранения

- credit_fact_history: основная таблица для анализа и построения NCL, PD, DPD переходов
- Миграция и алгоритм расчёта реализуются на Python с итоговой записью в PostgreSQL/SQLite

#### 6.1. Особенности
- Все параметры (матрицы, коэффициенты) подгружаются в память в начале итерации (pandas, dict).
- Фактический расчет потерянных платежей, баланса, статусов проводится отдельным модулем
- Batch-инсерты для оптимизации скорости генерации

***

### 7. Проверки/валидация

- Контроль жизненного цикла каждого кредита — от MOB=0 до закрытия/дефолта
- Доля дефолтов должна вызывать макро-шок в кризисные периоды (например, рост ставок в 2014)
- Распределение балансов и платежей соответствует заданному графику / продукту
- Сезонная волатильность просрочек и early repayments видна в данных

***

### 8. Примеры/шаблоны Python функций

```python
def migrate_dpd(current_bucket, migration_matrix, season_factor, macro_factor, noise):
    # Корректируем вероятности
    probs = {b: migration_matrix[current_bucket][b] * season_factor * macro_factor for b in migration_matrix[current_bucket]}
    # Применяем шум
    for b in probs: probs[b] *= (1 + noise[b])
    # Нормализуем, делаем выбор
    # ...
    return next_bucket

def payment_schedule(balance, rate, term, month, product_type):
    # Аннуитетное/дифференцированное
    # ...
    return scheduled_payment

def apply_fact_oper(loan, month, migration_matrix, season_ref, macro_ref, noise_ref):
    # Эмулирует все факты по кредиту за месяц, пишет в БД
    # ...
    return fact_row
```

***

**ДОКУМЕНТ ПОДГОТОВЛЕН:** <ФИО аналитика>  
**Дата:** 24 октября 2025 г.  
**Версия:** 1.0

Если нужен детализированный блок или развёрнутый формат примера реализации на Python/SQL — уточни, какой именно процесс расписать первым!